
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Qhst Z",
   Icon = 0, 
   LoadingTitle = "Qhst Z",
   LoadingSubtitle = "by n._2222",
   Theme = "Amethyst", 

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, 

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, 
      FileName = "Big Hub"
   },
   KeySystem = true, 
   KeySettings = {
      Title = "Qhst Z",
      Subtitle = "Key System",
      Note = ".gg/Qm9Fvvc4cm", 
      FileName = "Key13", 
      SaveKey = false,
      GrabKeyFromSite = true, 
      Key = {"e", "https://pastebin.com/raw/VtszSUFa"} 
   }
})

local HTab = Window:CreateTab("Home", 0)
local HSection = HTab:CreateSection("Local")


local Button = HTab:CreateButton({
   Name = "ESP",
   Callback = function()
      local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local MaxDistance = 400.5 

local NametagsEnabled = true 

local function CreateNametag(Player)
    if Player == LocalPlayer then return end 
 
    local function SetupNametag(Character)
        local Head = Character:FindFirstChild("Head")
        if not Head then return end 

        local OldNametag = Head:FindFirstChild("Nametag")
        if OldNametag then
            OldNametag:Destroy()
        end
 
        local BillboardGui = Instance.new("BillboardGui")
        BillboardGui.Name = "Nametag"
        BillboardGui.Adornee = Head
        BillboardGui.Size = UDim2.new(0, 75, 0, 150)
        BillboardGui.StudsOffset = Vector3.new(0, 2, 0)
        BillboardGui.AlwaysOnTop = true
 
        local TextLabel = Instance.new("TextLabel")
        TextLabel.Size = UDim2.new(1, 0, 1, 0)
        TextLabel.Text = Player.Name
        TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255) 
        TextLabel.BackgroundTransparency = 1
        TextLabel.TextStrokeTransparency = 0.75 
        TextLabel.Font = Enum.Font.Code
        TextLabel.TextScaled = true
        TextLabel.Parent = BillboardGui
 
        BillboardGui.Parent = Head

        local function UpdateVisibility()
            if NametagsEnabled and Player.Character and Player.Character:FindFirstChild("Head") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") then
                local Distance = (Player.Character.Head.Position - LocalPlayer.Character.Head.Position).Magnitude
                BillboardGui.Enabled = (Distance <= MaxDistance)
            else
                BillboardGui.Enabled = false
            end
        end

        local Connection
        Connection = RunService.Heartbeat:Connect(function()
            if Player.Character and Player.Character:FindFirstChild("Head") then
                UpdateVisibility()
            else
                BillboardGui:Destroy() 
                Connection:Disconnect()
            end
        end)
    end

    if Player.Character then
        SetupNametag(Player.Character)
    end
    Player.CharacterAdded:Connect(SetupNametag)
end

local function ApplyHighlight(Player)
    if Player == LocalPlayer then return end 
 
    local function SetupHighlight(Character)
        -- Remove old highlights
        for _, v in pairs(Character:GetChildren()) do
            if v:IsA("Highlight") then
                v:Destroy()
            end
        end
 
        local Highlighter = Instance.new("Highlight")
        Highlighter.Parent = Character
 
        local function UpdateFillColor()
            local DefaultColor = Color3.fromRGB(255, 48, 51)
            Highlighter.FillColor = Player.TeamColor and Player.TeamColor.Color or DefaultColor
        end
 
        UpdateFillColor()
        Player:GetPropertyChangedSignal("TeamColor"):Connect(UpdateFillColor)
 
        local Humanoid = Character:FindFirstChildOfClass("Humanoid")
        if Humanoid then
            Humanoid.Died:Connect(function()
                Highlighter:Destroy()
            end)
        end
    end

    if Player.Character then
        SetupHighlight(Player.Character)
    end
    Player.CharacterAdded:Connect(SetupHighlight)
end
 
-- Function to toggle nametags
local function ToggleNametags()
    NametagsEnabled = not NametagsEnabled -- Flip the toggle state
    print("Nametags Enabled:", NametagsEnabled)
 
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer and Player.Character and Player.Character:FindFirstChild("Head") then
            local Nametag = Player.Character.Head:FindFirstChild("Nametag")
            if Nametag then
                Nametag.Enabled = NametagsEnabled
            end
        end
    end
end
 
UserInputService.InputBegan:Connect(function(Input, GameProcessed)
    if not GameProcessed and Input.KeyCode == Enum.KeyCode.LeftBracket then
        ToggleNametags()
    end
end)

for _, Player in pairs(Players:GetPlayers()) do
    CreateNametag(Player)
    ApplyHighlight(Player)
end

Players.PlayerAdded:Connect(function(Player)
    CreateNametag(Player)
    ApplyHighlight(Player)
end)
   end,
})

local Slider = HTab:CreateSlider({
   Name = "Walkspeed",
   Range = {16, 64},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "example", 
   Callback = function(Value)
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Input = HTab:CreateInput({
   Name = "Custom Walkspeed",
   CurrentValue = "",
   PlaceholderText = "Input",
   RemoveTextAfterFocusLost = true,
   Flag = "Input1",
   Callback = function(Text)
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Text)
   end,
})

local Slider = HTab:CreateSlider({
   Name = "FOV",
   Range = {0, 120},
   Increment = 1,
   Suffix = "FOV",
   CurrentValue = 70,
   Flag = "F0V", 
   Callback = function(Value)
       local FovNumber = (Value)
       local Camera = workspace.CurrentCamera
       Camera.FieldOfView = FovNumber
   end,
})

local Input = HTab:CreateInput({
   Name = "Custom FOV",
   CurrentValue = "",
   PlaceholderText = "Input",
   RemoveTextAfterFocusLost = true,
   Flag = "Input1",
   Callback = function(Text)
       local FovNumber = (Text)
       local Camera = workspace.CurrentCamera
       Camera.FieldOfView = FovNumber
   end,
})

local Slider = HTab:CreateSlider({
   Name = "JumpPower",
   Range = {50, 200},
   Increment = 1,
   Suffix = "Power",
   CurrentValue = 50,
   Flag = "example", 
   Callback = function(Value)
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

local Input = HTab:CreateInput({
   Name = "Custom JumpPower",
   CurrentValue = (Value),
   PlaceholderText = "Input",
   RemoveTextAfterFocusLost = true,
   Flag = "Input1",
   Callback = function(Text)
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Text)
   end,
})

local Toggle = HTab:CreateToggle({
   Name = "NoClip",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        local function toggleNoclip()
            noclipEnabled = not noclipEnabled 

            if noclipEnabled then

                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            else

                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end

        toggleNoclip()
    end,
})

local Toggle = HTab:CreateToggle({
    Name = "Invisibility",
    CurrentValue = false,
    Flag = "InvisibleToggle",
    Callback = function(Value)
 
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        if character then
            if Value then
                -- Make the character invisible
                for _, child in pairs(character:GetDescendants()) do
                    if child:IsA("BasePart") then
                        child.LocalTransparencyModifier = 1 
                    end
                    if child:IsA("Accessory") then
                        child.Handle.LocalTransparencyModifier = 1 
                    end
                end
            else

                for _, child in pairs(character:GetDescendants()) do
                    if child:IsA("BasePart") then
                        child.LocalTransparencyModifier = 0 
                    end
                    if child:IsA("Accessory") then
                        child.Handle.LocalTransparencyModifier = 0 
                    end
                end
            end
        end
    end,
})

local Button = HTab:CreateButton({
    Name = "Reset",
    Callback = function()

        local player = game.Players.LocalPlayer

        if player.Character then
            player.Character:BreakJoints()
        end
    end,
})

local InfiniteJumpEnabled = false 

local Toggle = HTab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Flag = "InfiniteJumpToggle", 
   Callback = function(Value)
       InfiniteJumpEnabled = Value 
       if InfiniteJumpEnabled then

           game:GetService("UserInputService").JumpRequest:Connect(function()
               if InfiniteJumpEnabled then
                   local player = game.Players.LocalPlayer
                   if player and player.Character and player.Character:FindFirstChild("Humanoid") then
                       player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                   end
               end
           end)
           print("Infinite Jump Enabled")
       else
           print("Infinite Jump Disabled")
       end
   end,
})

game.Players.LocalPlayer.CharacterAdded:Connect(function()
    InfiniteJumpEnabled = false 
end)


local TpTab = Window:CreateTab("Tp")
local TSection = TpTab:CreateSection("Teleport")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Input = TpTab:CreateInput({
   Name = "Tp To User",
   CurrentValue = "",
   PlaceholderText = "Username",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)

       if Text and Text ~= "" then
           local targetPlayer = Players:FindFirstChild(Text)
           if targetPlayer then

               LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame

               if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                   LocalPlayer.Character.HumanoidRootPart.Anchored = true

                   task.delay(0.1, function()
                       if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                           LocalPlayer.Character.HumanoidRootPart.Anchored = false
                       end
                   end)
               end
           else
               print("Player not found!")
           end
       end
   end,
})

local button = TpTab:CreateButton({
   Name = "Teleport to Player",
   Callback = function()
       local username = Input:GetValue() 
       if username and username ~= "" then
           local targetPlayer = Players:FindFirstChild(username)
           if targetPlayer then

               LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame

               if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                   LocalPlayer.Character.HumanoidRootPart.Anchored = true

                   task.delay(0.1, function() 
                       if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                           LocalPlayer.Character.HumanoidRootPart.Anchored = false
                       end
                   end)
               end
           else
               print("Player not found!")
           end
       else
           print("Please enter a username.")
       end
   end,
})
