local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "ðŸŸ£ Bubble Gum Simulator INFINITY Gui",
   Icon = 0,
   LoadingTitle = "ðŸŸ£ Bubble Gum Simulator INFINITY",
   LoadingSubtitle = "by n._2222",
   Theme = "Default",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },

   KeySystem = true, 
   KeySettings = {
      Title = "ðŸŸ£ Bubble Gum Simulator INFINITY | Key",
      Subtitle = "Key System",
      Note = ".gg/Qm9Fvvc4cm", 
      FileName = "BGSI Key", 
      SaveKey = false, 
      GrabKeyFromSite = true, 
      Key = {"https://pastebin.com/raw/VtszSUFa"} 
   }
})

local MainTab = Window:CreateTab("Local", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Test")

Rayfield:Notify({
   Title = "BGSI Gui executed.",
   Content = "Loaded!",
   Duration = 5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
      Name = "Okay!",
      Callback = function()
      print("The user has tapped Okay!")
     end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "Player ESP",
   Callback = function()
      local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local MaxDistance = 400.5 -- Range in studs for nametags to show

local NametagsEnabled = true 

local function CreateNametag(Player)
    if Player == LocalPlayer then return end
 
    local function SetupNametag(Character)
        local Head = Character:FindFirstChild("Head")
        if not Head then return end
 
        local OldNametag = Head:FindFirstChild("Nametag")
        if OldNametag then
            OldNametag:Destroy()
        end
 
        local BillboardGui = Instance.new("BillboardGui")
        BillboardGui.Name = "Nametag"
        BillboardGui.Adornee = Head
        BillboardGui.Size = UDim2.new(0, 75, 0, 150)
        BillboardGui.StudsOffset = Vector3.new(0, 2, 0)
        BillboardGui.AlwaysOnTop = true
 
        local TextLabel = Instance.new("TextLabel")
        TextLabel.Size = UDim2.new(1, 0, 1, 0)
        TextLabel.Text = Player.Name
        TextLabel.TextColor3 = Color3.fromRGB(105, 225, 4)
        TextLabel.BackgroundTransparency = 1
        TextLabel.TextStrokeTransparency = 0.75
        TextLabel.Font = Enum.Font.Code
        TextLabel.TextScaled = true
        TextLabel.Parent = BillboardGui
 
        BillboardGui.Parent = Head
 
        local function UpdateVisibility()
            if NametagsEnabled and Player.Character and Player.Character:FindFirstChild("Head") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") then
                local Distance = (Player.Character.Head.Position - LocalPlayer.Character.Head.Position).Magnitude
                BillboardGui.Enabled = (Distance <= MaxDistance)
            else
                BillboardGui.Enabled = false
            end
        end
 
        -- Monitor visibility
        local Connection
        Connection = RunService.Heartbeat:Connect(function()
            if Player.Character and Player.Character:FindFirstChild("Head") then
                UpdateVisibility()
            else
                Connection:Disconnect()
            end
        end)
    end
 
    -- Apply when character spawns or respawns
    if Player.Character then
        SetupNametag(Player.Character)
    end
    Player.CharacterAdded:Connect(SetupNametag)
end

local function ApplyHighlight(Player)
    if Player == LocalPlayer then return end -- Skip local player
 
    local function SetupHighlight(Character)
        -- Remove old highlights
        for _, v in pairs(Character:GetChildren()) do
            if v:IsA("Highlight") then
                v:Destroy()
            end
        end
 
        local Highlighter = Instance.new("Highlight")
        Highlighter.Parent = Character
 
        local function UpdateFillColor()
            local DefaultColor = Color3.fromRGB(255, 48, 51) -- Default red color
            Highlighter.FillColor = Player.TeamColor and Player.TeamColor.Color or DefaultColor
        end
 
        UpdateFillColor()
        Player:GetPropertyChangedSignal("TeamColor"):Connect(UpdateFillColor)
 
        -- Remove highlight when player dies
        local Humanoid = Character:FindFirstChildOfClass("Humanoid")
        if Humanoid then
            Humanoid.Died:Connect(function()
                Highlighter:Destroy()
            end)
        end
    end
 
    if Player.Character then
        SetupHighlight(Player.Character)
    end
    Player.CharacterAdded:Connect(SetupHighlight)
end
 
-- Function to toggle nametags
local function ToggleNametags()
    NametagsEnabled = not NametagsEnabled 
    print("Nametags Enabled:", NametagsEnabled)
 
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer and Player.Character and Player.Character:FindFirstChild("Head") then
            local Nametag = Player.Character.Head:FindFirstChild("Nametag")
            if Nametag then
                Nametag.Enabled = NametagsEnabled
            end
        end
    end
end
 
UserInputService.InputBegan:Connect(function(Input, GameProcessed)
    if not GameProcessed and Input.KeyCode == Enum.KeyCode.LeftBracket then
        ToggleNametags()
    end
end)
 
for _, Player in pairs(Players:GetPlayers()) do
    CreateNametag(Player)
    ApplyHighlight(Player)
end
 
Players.PlayerAdded:Connect(function(Player)
    CreateNametag(Player)
    ApplyHighlight(Player)
end)
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "Walkspeed",
   Range = {0, 41},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "example", 
   Callback = function(Value)
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "FOV",
   Range = {0, 120},
   Increment = 1,
   Suffix = "FOV",
   CurrentValue = 16,
   Flag = "example", 
   Callback = function(Value)
       local FovNumber = (Value)
       local Camera = workspace.CurrentCamera
       Camera.FieldOfView = FovNumber
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "Jumppower",
   Range = {0, 1000},
   Increment = 1,
   Suffix = "Power",
   CurrentValue = 50,
   Flag = "example", 
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.Jumppower = (Value)
   end,
})
