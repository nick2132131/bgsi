local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Lunar Z | MM2",
   Icon = 0, 
   LoadingTitle = "Lunar Z | MM2",
   LoadingSubtitle = "by n._2222",
   Theme = "DarkBlue", 

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, 

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, 
      FileName = "Big Hub"
   },
   KeySystem = true, 
   KeySettings = {
      Title = "Lunar Z | MM2",
      Subtitle = "Key System",
      Note = ".gg/Qm9Fvvc4cm", 
      FileName = "Key13", 
      SaveKey = false,
      GrabKeyFromSite = true, 
      Key = {"e", "https://pastebin.com/raw/VtszSUFa"} 
   }
})

local HTab = Window:CreateTab("Home", 0)
local HSection = HTab:CreateSection("Local")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local espEnabled = false
local espBoxes = {}

-- üß† Role Detection
local function GetRole(player)
	if not player.Backpack then return "Innocent" end

	local hasGun = player.Backpack:FindFirstChild("Gun") or (player.Character and player.Character:FindFirstChild("Gun"))
	local hasKnife = player.Backpack:FindFirstChild("Knife") or (player.Character and player.Character:FindFirstChild("Knife"))

	if hasGun then return "Sheriff" end
	if hasKnife then return "Murderer" end
	return "Innocent"
end

-- üéØ Create Box ESP
local function createESP(player, color)
	local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	if not espBoxes[player] then
		local box = Instance.new("BoxHandleAdornment")
		box.Name = "ESPBox"
		box.Size = Vector3.new(4, 6, 1)
		box.AlwaysOnTop = true
		box.ZIndex = 10
		box.Transparency = 0.5
		box.Adornee = hrp
		box.Color3 = color
		box.Parent = hrp
		espBoxes[player] = box
	else
		local box = espBoxes[player]
		if box.Parent ~= hrp then
			box.Parent = hrp
		end
		box.Adornee = hrp
		box.Color3 = color
	end
end

-- üîÅ Update ESP loop (no destroy if player dies)
local function updateESP()
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= Players.LocalPlayer then
			local role = GetRole(player)
			local color = role == "Sheriff" and Color3.fromRGB(0, 0, 255)
				or role == "Murderer" and Color3.fromRGB(255, 0, 0)
				or Color3.fromRGB(0, 255, 0)

			local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
			if hrp then
				createESP(player, color)
			end
		end
	end
end

-- üü¢ Rayfield Toggle
local Toggle = HTab:CreateToggle({
	Name = "Role ESP",
	CurrentValue = false,
	Flag = "ESP_Toggle",
	Callback = function(Value)
		espEnabled = Value

		if Value then
			RunService:BindToRenderStep("ESPUpdate", Enum.RenderPriority.Camera.Value + 1, updateESP)
		else
			RunService:UnbindFromRenderStep("ESPUpdate")
			for _, v in pairs(espBoxes) do
				v:Destroy()
			end
			espBoxes = {}
		end
	end,
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local Drawings = {}
local nameESPEnabled = false

-- Get role
local function GetRole(player)
	if player.Backpack:FindFirstChild("Gun") or (player.Character and player.Character:FindFirstChild("Gun")) then
		return "Sheriff"
	elseif player.Backpack:FindFirstChild("Knife") or (player.Character and player.Character:FindFirstChild("Knife")) then
		return "Murderer"
	else
		return "Innocent"
	end
end

local RoleColors = {
	Murderer = Color3.fromRGB(255, 0, 0),
	Sheriff = Color3.fromRGB(0, 100, 255),
	Innocent = Color3.fromRGB(0, 255, 0)
}

-- Toggle (Rayfield)
HTab:CreateToggle({
	Name = "Name ESP",
	CurrentValue = false,
	Callback = function(Value)
		nameESPEnabled = Value
	end,
})

-- Main update loop
RunService.RenderStepped:Connect(function()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
			local head = player.Character.Head
			local pos, onScreen = Camera:WorldToViewportPoint(head.Position)

			-- Hide if not enabled or not on screen
			if not nameESPEnabled or not onScreen or pos.Z < 0 then
				if Drawings[player] and Drawings[player].Name then
					Drawings[player].Name.Visible = false
				end
				continue
			end

			if not Drawings[player] then Drawings[player] = {} end
			if not Drawings[player].Name then
				local text = Drawing.new("Text")
				text.Size = 14
				text.Center = true
				text.Outline = true
				text.Font = 2
				Drawings[player].Name = text
			end

			local role = GetRole(player)
			local color = RoleColors[role] or Color3.new(1, 1, 1)

			Drawings[player].Name.Text = player.Name
			Drawings[player].Name.Color = color
			Drawings[player].Name.Position = Vector2.new(pos.X, pos.Y - 25)
			Drawings[player].Name.Visible = true
		else
			if Drawings[player] and Drawings[player].Name then
				Drawings[player].Name.Visible = false
			end
		end
	end
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local Tracers = {}
local tracerESPEnabled = false

-- Role detection
local function GetRole(player)
	if player.Backpack:FindFirstChild("Gun") or (player.Character and player.Character:FindFirstChild("Gun")) then
		return "Sheriff"
	elseif player.Backpack:FindFirstChild("Knife") or (player.Character and player.Character:FindFirstChild("Knife")) then
		return "Murderer"
	else
		return "Innocent"
	end
end

local RoleColors = {
	Murderer = Color3.fromRGB(255, 0, 0),
	Sheriff = Color3.fromRGB(0, 100, 255),
	Innocent = Color3.fromRGB(0, 255, 0)
}

-- Rayfield toggle
HTab:CreateToggle({
	Name = "Tracer",
	CurrentValue = false,
	Callback = function(Value)
		tracerESPEnabled = Value
	end,
})

-- Update loop
RunService.RenderStepped:Connect(function()
	local localChar = LocalPlayer.Character
	local localHRP = localChar and localChar:FindFirstChild("HumanoidRootPart")

	if not tracerESPEnabled or not localHRP then
		for _, v in pairs(Tracers) do
			v.Visible = false
		end
		return
	end

	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local targetHRP = player.Character.HumanoidRootPart
			local screenPos, onScreen = Camera:WorldToViewportPoint(targetHRP.Position)

			if not onScreen or screenPos.Z < 0 then
				if Tracers[player] then
					Tracers[player].Visible = false
				end
				continue
			end

			if not Tracers[player] then
				local line = Drawing.new("Line")
				line.Thickness = 1.5
				line.Transparency = 1
				Tracers[player] = line
			end

			local role = GetRole(player)
			local color = RoleColors[role] or Color3.new(1, 1, 1)

			local fromScreen = Camera:WorldToViewportPoint(localHRP.Position)
			local toScreen = Camera:WorldToViewportPoint(targetHRP.Position)

			Tracers[player].From = Vector2.new(fromScreen.X, fromScreen.Y)
			Tracers[player].To = Vector2.new(toScreen.X, toScreen.Y)
			Tracers[player].Color = color
			Tracers[player].Visible = true
		else
			if Tracers[player] then
				Tracers[player].Visible = false
			end
		end
	end
end)

local plr = game.Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local flying = false
local speed = 50
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local BodyGyro = Instance.new("BodyGyro")
BodyGyro.P = 9e4
BodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)

local BodyVelocity = Instance.new("BodyVelocity")
BodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)

-- Fly Functions
local function StartFlying()
    BodyGyro.Parent = hrp
    BodyVelocity.Parent = hrp

    RunService:BindToRenderStep("FlyMovement", Enum.RenderPriority.Character.Value, function()
        local cf = workspace.CurrentCamera.CFrame
        local moveDirection = Vector3.zero

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDirection += cf.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDirection -= cf.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDirection -= cf.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDirection += cf.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection += cf.UpVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDirection -= cf.UpVector
        end

        if moveDirection.Magnitude > 0 then
            BodyVelocity.Velocity = moveDirection.Unit * speed
        else
            BodyVelocity.Velocity = Vector3.zero
        end

        BodyGyro.CFrame = cf
    end)
end

local function StopFlying()
    BodyGyro.Parent = nil
    BodyVelocity.Parent = nil
    RunService:UnbindFromRenderStep("FlyMovement")
end

HTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Callback = function(Value)
        flying = Value
        if flying then
            StartFlying()
        else
            StopFlying()
        end
    end,
})

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

local GunName = "GunDrop" -- Adjust this if the name is different in your game

HTab:CreateButton({
    Name = "Grab Gun",
    Callback = function()
        local character = LocalPlayer.Character
        local root = character and character:FindFirstChild("HumanoidRootPart")
        if not root then
            warn("No HumanoidRootPart found.")
            return
        end

        local gun = Workspace:FindFirstChild(GunName, true) -- Searches all descendants
        if gun then
            local targetPart = gun:IsA("BasePart") and gun or (gun:FindFirstChildWhichIsA("BasePart"))
            if not targetPart then
                warn("Couldn't find a part to teleport to in the gun.")
                return
            end

            local originalCFrame = root.CFrame
            root.CFrame = targetPart.CFrame + Vector3.new(0, 3, 0)

            task.wait(0.05) -- Give time to pick it up
            root.CFrame = originalCFrame
        else
            warn("GunDrop not found in Workspace.")
        end
    end
})

local ESP = {
	Name = false
}

local Slider = HTab:CreateSlider({
   Name = "Walkspeed",
   Range = {16, 64},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "example", 
   Callback = function(Value)
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Input = HTab:CreateInput({
   Name = "Custom Walkspeed",
   CurrentValue = "",
   PlaceholderText = "Input",
   RemoveTextAfterFocusLost = true,
   Flag = "Input1",
   Callback = function(Text)
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Text)
   end,
})

local Slider = HTab:CreateSlider({
   Name = "FOV",
   Range = {0, 120},
   Increment = 1,
   Suffix = "FOV",
   CurrentValue = 70,
   Flag = "F0V", 
   Callback = function(Value)
       local FovNumber = (Value)
       local Camera = workspace.CurrentCamera
       Camera.FieldOfView = FovNumber
   end,
})

local Input = HTab:CreateInput({
   Name = "Custom FOV",
   CurrentValue = "",
   PlaceholderText = "Input",
   RemoveTextAfterFocusLost = true,
   Flag = "Input1",
   Callback = function(Text)
       local FovNumber = (Text)
       local Camera = workspace.CurrentCamera
       Camera.FieldOfView = FovNumber
   end,
})

local Slider = HTab:CreateSlider({
   Name = "JumpPower",
   Range = {50, 200},
   Increment = 1,
   Suffix = "Power",
   CurrentValue = 50,
   Flag = "example", 
   Callback = function(Value)
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

local Input = HTab:CreateInput({
   Name = "Custom JumpPower",
   CurrentValue = (Value),
   PlaceholderText = "Input",
   RemoveTextAfterFocusLost = true,
   Flag = "Input1",
   Callback = function(Text)
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Text)
   end,
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local noclipConnection = nil
local noclipEnabled = false

local Toggle = HTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(Value)
        noclipEnabled = Value

        if Value then
            noclipConnection = RunService.Stepped:Connect(function()
                local char = LocalPlayer.Character
                if char then
                    for _, part in pairs(char:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else

            if noclipConnection then
                noclipConnection:Disconnect()
                noclipConnection = nil
            end

            local char = LocalPlayer.Character
            if char then
                for _, part in pairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end,
})

local Toggle = HTab:CreateToggle({
    Name = "Invisibility",
    CurrentValue = false,
    Flag = "InvisibleToggle",
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        if character then
            for _, child in pairs(character:GetDescendants()) do
                if child:IsA("BasePart") then

                    child.Transparency = Value and 1 or 0
                    child.LocalTransparencyModifier = 0 

                    child.CastShadow = not Value
                end

                if child:IsA("Accessory") and child:FindFirstChild("Handle") then
                    child.Handle.Transparency = Value and 1 or 0
                    child.Handle.LocalTransparencyModifier = 0
                end

                if child:IsA("Decal") and child.Name == "face" then
                    child.Transparency = Value and 1 or 0
                end
            end
        end
    end,
})

local Button = HTab:CreateButton({
    Name = "Reset",
    Callback = function()

        local player = game.Players.LocalPlayer

        if player.Character then
            player.Character:BreakJoints()
        end
    end,
})

local InfiniteJumpEnabled = false 

local Toggle = HTab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Flag = "InfiniteJumpToggle", 
   Callback = function(Value)
       InfiniteJumpEnabled = Value 
       if InfiniteJumpEnabled then

           game:GetService("UserInputService").JumpRequest:Connect(function()
               if InfiniteJumpEnabled then
                   local player = game.Players.LocalPlayer
                   if player and player.Character and player.Character:FindFirstChild("Humanoid") then
                       player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                   end
               end
           end)
           print("Infinite Jump Enabled")
       else
           print("Infinite Jump Disabled")
       end
   end,
})

game.Players.LocalPlayer.CharacterAdded:Connect(function()
    InfiniteJumpEnabled = false 
end)


local TpTab = Window:CreateTab("Tp")
local TSection = TpTab:CreateSection("Teleport")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Input = TpTab:CreateInput({
        
    Name = "Tp To User",
    CurrentValue = "",
    PlaceholderText = "Username",
    RemoveTextAfterFocusLost = true,
    Flag = "TpToUserInput",
    Callback = function(Text)
        local username = string.lower(Text)

        if username and username ~= "" then

            local targetPlayer = nil
            for _, player in ipairs(Players:GetPlayers()) do
                if string.lower(player.Name) == username then
                    targetPlayer = player
                    break
                end
            end

            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if root then

                    root.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
                    root.Anchored = true

                    task.delay(0.1, function()
                        if root then
                            local savedCFrame = root.CFrame
                            root.Anchored = false
                            root.CFrame = savedCFrame
                        end
                    end)
                end
            else
                warn("Player not found or not loaded!")
            end
        else
            warn("Please enter a username.")
        end
    end,
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Finds the role and returns the player
local function GetRolePlayer(roleName)
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			if roleName == "Murderer" and (player.Backpack:FindFirstChild("Knife") or (player.Character and player.Character:FindFirstChild("Knife"))) then
				return player
			elseif roleName == "Sheriff" and (player.Backpack:FindFirstChild("Gun") or (player.Character and player.Character:FindFirstChild("Gun"))) then
				return player
			end
		end
	end
end

-- TP Button: Murderer
TpTab:CreateButton({
	Name = "Teleport to Murderer",
	Callback = function()
		local target = GetRolePlayer("Murderer")
		if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
			LocalPlayer.Character:MoveTo(target.Character.HumanoidRootPart.Position + Vector3.new(0, 3, 0))
		end
	end,
})

-- TP Button: Sheriff
TpTab:CreateButton({
	Name = "Teleport to Sheriff",
	Callback = function()
		local target = GetRolePlayer("Sheriff")
		if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
			LocalPlayer.Character:MoveTo(target.Character.HumanoidRootPart.Position + Vector3.new(0, 3, 0))
		end
	end,
})

local OTab = Window:CreateTab("Other", 0)
local OSec = OTab:CreateSection("Other")

local Players = game:GetService("Players")
local setclipboard = setclipboard or toclipboard or set_clipboard -- depends on executor

local function GetRole(player)
	if player.Backpack:FindFirstChild("Gun") or (player.Character and player.Character:FindFirstChild("Gun")) then
		return "Sheriff"
	elseif player.Backpack:FindFirstChild("Knife") or (player.Character and player.Character:FindFirstChild("Knife")) then
		return "Murderer"
	else
		return "Innocent"
	end
end

-- üîµ Button for Sheriff
OTab:CreateButton({
	Name = "Copy Sheriff",
	Callback = function()
		for _, player in ipairs(Players:GetPlayers()) do
			if player ~= Players.LocalPlayer then
				local role = GetRole(player)
				if role == "Sheriff" then
					local message = player.Name .. " is Sheriff!"
					if setclipboard then
						setclipboard(message)
					else
						warn("Clipboard function not supported.")
					end
				end
			end
		end
	end,
})

-- üî¥ Button for Murderer
OTab:CreateButton({
	Name = "Copy Murd",
	Callback = function()
		for _, player in ipairs(Players:GetPlayers()) do
			if player ~= Players.LocalPlayer then
				local role = GetRole(player)
				if role == "Murderer" then
					local message = player.Name .. " is Murderer!"
					if setclipboard then
						setclipboard(message)
					else
						warn("Clipboard function not supported.")
					end
				end
			end
		end
	end,
})
